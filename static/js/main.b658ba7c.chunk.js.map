{"version":3,"sources":["serviceWorker.js","index.js","App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","inputButtons","Calculator","props","_this","Object","C_Users_yiwen_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_yiwen_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_yiwen_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","inputValue","input","oldValue","recValue","valueInput","newValue","setState","oldvalue","value","outcome","eval","result","_this2","buttonlist","forEach","data","push","react__WEBPACK_IMPORTED_MODULE_5___default","type","onClick","inputButtonPressed","bind","className","React","Component"],"mappings":"6LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,qjCE7HbC,aAAa,CAAC,IAAI,IAAI,IAAI,IAC9B,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,IACZ,IAAI,IAAI,IAAI,KAAK,KAEbC,sCACJ,SAAAA,WAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,4GAAA,EAAAD,CAAAE,KAAAL,aAChBE,EAAAC,OAAAG,uHAAA,EAAAH,CAAAE,KAAAF,OAAAI,4GAAA,EAAAJ,CAAAH,YAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CACTC,WAAW,KAHGR,8TAOCS,GACjB,IAAIC,EAASP,KAAKI,MAAMC,WACpBG,EAASR,KAAKS,WAAWF,EAASD,GAClCI,EAAS,GACbA,EAASL,WAAWG,EACpBR,KAAKW,SAASD,iDAGLE,SAASC,OAClB,OAAQA,OACN,IAAI,IACF,IAAIC,QAAQ,GAAGC,KAAKH,UAChBI,OAAOJ,SAAS,IAAIE,QACxB,OAAOE,OACT,IAAI,KAEF,OADAJ,SAAS,IACFA,SACT,IAAI,IACJ,IAAI,IACJ,IAAI,IACJ,IAAI,IACF,OAAOA,SAASC,MAClB,QAIE,MAHe,MAAXD,WACFA,SAAS,IAEJA,SAASC,wCAOd,IAAAI,EAAAjB,KAGFkB,EAAa,GASjB,OARAxB,aAAayB,QAAQ,SAAAC,GACnBF,EAAWG,KACPC,2CAAAvC,EAAAC,cAAA,UAAQuC,KAAK,SACLC,QAASP,EAAKQ,mBAAmBC,KAAKT,EAAKG,IACjDA,MAMJE,2CAAAvC,EAAAC,cAAA,OAAK2C,UAAU,cACbL,2CAAAvC,EAAAC,cAAA,SAAOuC,KAAK,OAAOI,UAAU,oBACtBd,MAAOb,KAAKI,MAAMC,YAAaL,KAAKI,MAAMS,OACjDS,2CAAAvC,EAAAC,cAAA,OAAK2C,UAAU,mBACZT,oBA3DYU,6CAAMC,WAmEhBlC","file":"static/js/main.b658ba7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React,{Component} from 'react'\n//import ReactDOM from 'react-dom'\n//import {createStore} from 'redux'\n//import {Provider,connect} from 'react-redux'\nimport './App.css';\n\nconst inputButtons=['+','-','*','/',\n  '1','2','3','4',\n  '5','6','7','8',\n  '9','0','.','AC','='];\n\nclass Calculator extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      inputValue:'0'\n    }\n  }\n\n  inputButtonPressed(input){\n    let oldValue=this.state.inputValue;\n    let recValue=this.valueInput(oldValue,input);\n    let newValue={};\n    newValue.inputValue=recValue;\n    this.setState(newValue)\n  }\n\n  valueInput(oldvalue,value){\n    switch (value) {\n      case'=':\n        let outcome=\"\"+eval(oldvalue);\n        let result=oldvalue+'='+outcome;\n        return result;\n      case'AC':\n        oldvalue='0';\n        return oldvalue;\n      case'+':\n      case'-':\n      case'*':\n      case'/':\n        return oldvalue+value;\n      default:\n        if (oldvalue==='0'){\n          oldvalue=''\n        }\n        return oldvalue+value;\n\n    }}\n\n  //renderInputButtons(){\n\n\n  render(){\n    // const curData=this.props;\n\n    let buttonlist = [];\n    inputButtons.forEach(data => {\n      buttonlist.push(\n          <button type=\"button\"\n                  onClick={this.inputButtonPressed.bind(this,data)}\n          >{data}</button>\n      );\n    });\n\n    return(\n\n        <div className=\"calculator\">\n          <input type=\"text\" className=\"calculator-screen\"\n                 value={this.state.inputValue}>{this.state.value}</input>\n          <div className=\"calculator-keys\" >\n            {buttonlist}\n          </div>\n        </div>\n    )\n  }\n}\n\n\nexport default Calculator;\n//ReactDOM.render(<Calculator/>,\n  //  document.getElementById('example'));"],"sourceRoot":""}